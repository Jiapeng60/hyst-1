# Created by Hyst v1.2
# Hybrid Automaton in Flow*
# Converted from file: di_cont.xml
# Command Line arguments: di_cont.xml -tp orders=8:aggregation=interval -pass_continuization "-var a -period 0.005 -timevar t -times 1.5 5 -bloats 4 4 -noerrormodes" -o out.model -flowstar


hybrid reachability
{
    # Vars
    state var x, v, a, t, _urgent_clock

    setting
    {
        fixed steps 0.02
        time 5
        remainder estimation 1e-4
        identity precondition
        gnuplot octagon t,x
        fixed orders 8
        cutoff 1e-15
        precision 53
        output out
        max jumps 1000
        print on
    }

    modes
    {
        flying
        {
            linear ode
            {
                x' = v
                v' = a + [-0.046355674347099994, 0.163239960715]
                a' = -10 * v - 3 * a + [-0.48971988214499995, 0.13906702304129998]
                t' = 1
                _urgent_clock' = 0
            }
            inv
            {
                # Original invariant: t >= 0 & t <= 1.505

                t >= 0   t <= 1.505
            }
        }

        initial
        {
            linear ode
            {
                x' = 0
                v' = 0
                a' = 0
                t' = 0
                _urgent_clock' = 1
            }
            inv
            {
                # Original invariant: _urgent_clock <= 0.000002

                _urgent_clock <= 0.000002
            }
        }

        flying_2
        {
            linear ode
            {
                x' = v
                v' = a + [-0.03617866773205, 0.024845973653875]
                a' = -10 * v - 3 * a + [-0.074537920961625, 0.10853600319615]
                t' = 1
                _urgent_clock' = 0
            }
            inv
            {
                # Original invariant: t >= 1.5 & t <= 5.005

                t >= 1.5   t <= 5.005
            }
        }
    }

    jumps
    {
        initial -> flying
        guard
        {
        }
        reset
        {
            a' := 10 * (1 - x) + 3 * -v
            _urgent_clock' := 0
        }
        interval aggregation

        flying -> flying_2
        guard
        {
            # Original guard: t >= 1.5

            t >= 1.5
        }
        reset
        {
        }
        interval aggregation
    }

    init
    {
        initial
        {
            a in [0, 0]
            t in [0, 0]
            _urgent_clock in [0, 0.000002]
            v in [0, 0]
            x in [0, 0.1]
        }
    }
}
